/*
 * Sessionize JSON-REST API
 * Sessionize JSON-REST API documentation by XDEV Software
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.sessionize.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import software.xdev.sessionize.model.QuestionAnswer;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SessionAllAllOf
 */
@JsonPropertyOrder({
  SessionAllAllOf.JSON_PROPERTY_ID,
  SessionAllAllOf.JSON_PROPERTY_SPEAKERS,
  SessionAllAllOf.JSON_PROPERTY_QUESTION_ANSWERS
})
@JsonTypeName("SessionAll_allOf")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SessionAllAllOf {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_SPEAKERS = "speakers";
  private List<String> speakers = new ArrayList<>();

  public static final String JSON_PROPERTY_QUESTION_ANSWERS = "questionAnswers";
  private List<QuestionAnswer> questionAnswers = new ArrayList<>();

  public SessionAllAllOf() {
  }

  public SessionAllAllOf id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public SessionAllAllOf speakers(List<String> speakers) {
    
    this.speakers = speakers;
    return this;
  }

  public SessionAllAllOf addSpeakersItem(String speakersItem) {
    if (this.speakers == null) {
      this.speakers = new ArrayList<>();
    }
    this.speakers.add(speakersItem);
    return this;
  }

   /**
   * Get speakers
   * @return speakers
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SPEAKERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getSpeakers() {
    return speakers;
  }


  @JsonProperty(JSON_PROPERTY_SPEAKERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSpeakers(List<String> speakers) {
    this.speakers = speakers;
  }


  public SessionAllAllOf questionAnswers(List<QuestionAnswer> questionAnswers) {
    
    this.questionAnswers = questionAnswers;
    return this;
  }

  public SessionAllAllOf addQuestionAnswersItem(QuestionAnswer questionAnswersItem) {
    if (this.questionAnswers == null) {
      this.questionAnswers = new ArrayList<>();
    }
    this.questionAnswers.add(questionAnswersItem);
    return this;
  }

   /**
   * Get questionAnswers
   * @return questionAnswers
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUESTION_ANSWERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<QuestionAnswer> getQuestionAnswers() {
    return questionAnswers;
  }


  @JsonProperty(JSON_PROPERTY_QUESTION_ANSWERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuestionAnswers(List<QuestionAnswer> questionAnswers) {
    this.questionAnswers = questionAnswers;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionAllAllOf sessionAllAllOf = (SessionAllAllOf) o;
    return Objects.equals(this.id, sessionAllAllOf.id) &&
        Objects.equals(this.speakers, sessionAllAllOf.speakers) &&
        Objects.equals(this.questionAnswers, sessionAllAllOf.questionAnswers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, speakers, questionAnswers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionAllAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    speakers: ").append(toIndentedString(speakers)).append("\n");
    sb.append("    questionAnswers: ").append(toIndentedString(questionAnswers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `speakers` to the URL query string
    if (getSpeakers() != null) {
      for (int i = 0; i < getSpeakers().size(); i++) {
        try {
          joiner.add(String.format("%sspeakers%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSpeakers().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `questionAnswers` to the URL query string
    if (getQuestionAnswers() != null) {
      for (int i = 0; i < getQuestionAnswers().size(); i++) {
        if (getQuestionAnswers().get(i) != null) {
          joiner.add(getQuestionAnswers().get(i).toUrlQueryString(String.format("%squestionAnswers%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

